# -*- coding: utf-8 -*-
"""fake_news_detection.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W-Rz84eZevO1YgtBCHmeKqqQv0u8ZzTT
"""

import streamlit as st
import pickle
import pandas as pd
import re
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go

# Page Configuration
st.set_page_config(
    page_title="Fake News Detector",
    page_icon="üîç",
    layout="wide"
)

# CSS styles
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1f4e79;
        font-size: 3em;
        margin-bottom: 30px;
    }
    .result-box {
        padding: 20px;
        border-radius: 10px;
        margin: 20px 0;
    }
    .fake-news {
        background-color: #ffebee;
        border-left: 5px solid #f44336;
    }
    .real-news {
        background-color: #e8f5e8;
        border-left: 5px solid #4caf50;
    }
</style>
""", unsafe_allow_html=True)

# Model Loading Functions
@st.cache_resource
def load_model():
    try:
        with open('best_model.pkl', 'rb') as f:
            model = pickle.load(f)
        with open('vectorizer.pkl', 'rb') as f:
            vectorizer = pickle.load(f)
        with open('model_info.pkl', 'rb') as f:
            model_info = pickle.load(f)
        return model, vectorizer, model_info
    except FileNotFoundError:
        st.error("Couldn't find the model files. First, train the model.")
        return None, None, None

# Text Cleaning
def clean_text(text):
    if pd.isna(text):
        return ""
    text = text.lower()
    text = re.sub(r'[^a-zA-Z0-9\s]', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

# Prediction functions
def predict_news(title, text, model, vectorizer):
    # Clean the text and concatenate
    title_clean = clean_text(title)
    text_clean = clean_text(text)
    combined_text = title_clean + ' ' + text_clean

    # TF-IDF transform
    text_tfidf = vectorizer.transform([combined_text])

    # Prediction
    prediction = model.predict(text_tfidf)[0]
    probability = model.predict_proba(text_tfidf)[0]

    return prediction, probability

# Main App
def main():
    # Header
    st.markdown('<h1 class="main-header">üîç Fake News Detector</h1>', unsafe_allow_html=True)
    st.markdown("---")

    # Model Loading
    model, vectorizer, model_info = load_model()

    if model is None or vectorizer is None or model_info is None:
      st.error("Model files not found. Please train and save the model first.")
      st.stop()


    # Model Info
    with st.expander("‚ÑπÔ∏è Model Information"):
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Model used:", model_info['name'])
        with col2:
            st.metric("Model Accuracy", f"{model_info['accuracy']:.2%}")

    st.markdown("---")

    # Main Content
    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("üìù News Check")
         # User Info
        title_input = st.text_input(
            "News Title:",
            value=st.session_state.get('example_title', ''),
            placeholder="Enter the news title..."
        )

        text_input = st.text_area(
            "News Text:",
            value=st.session_state.get('example_text', ''),
            height=300,
            placeholder="Enter the news text..."
        )

        # Control Button
        analyze_button = st.button("üîç Analyze", type="primary", use_container_width=True)

        if analyze_button and (title_input or text_input):
            with st.spinner('Analyzing...'):
                # Prediction
                prediction, probability = predict_news(title_input, text_input, model, vectorizer)

                # Show the result
                if prediction == 0:  # Fake News
                    st.markdown(f"""
                    <div class="result-box fake-news">
                        <h2>üö® Fake News</h2>
                        <p><strong>Confident Percentage:</strong> {probability[0]:.2%}</p>
                        <p>There is a high probability that this is fake news. Please verify it using reliable sources.</p>
                    </div>
                    """, unsafe_allow_html=True)
                else:  # True News
                    st.markdown(f"""
                    <div class="result-box real-news">
                        <h2>‚úÖ True News</h2>
                        <p><strong>Confident Score:</strong> {probability[1]:.2%}</p>
                        <p>There is a high probability that this is true news. Please verify it using reliable sources.</p>
                    </div>
                    """, unsafe_allow_html=True)

                # Detailed Analysis
                st.subheader("Detaylƒ± Analiz üìä")

                # Confident Scores Graphics
                fig = go.Figure(data=[
                    go.Bar(
                        x=['Fake', 'True'],
                        y=[probability[0], probability[1]],
                        marker_color=['#ff4444', '#44ff44']
                    )
                ])
                fig.update_layout(
                    title="Confident Scores",
                    yaxis_title="Probability",
                    xaxis_title="Category"
                )
                st.plotly_chart(fig, use_container_width=True)

                # Text Statics
                col3, col4, col5 = st.columns(3)
                with col3:
                    st.metric("Title Length", len(title_input))
                with col4:
                    st.metric("Text Length", len(text_input))
                with col5:
                    st.metric("Total Words", len((title_input + ' ' + text_input).split()))

        elif analyze_button:
            st.warning("‚ö†Ô∏è Please fill either title or the text area.")

    with col2:
        st.header("üí° Usage Tips")

        tips = [
          "üéØ **Title and content**: You'll get more accurate results if you fill in both fields."
          "üì∞ **Source check**: No matter the result, don‚Äôt forget to verify the source."
          "üîç **Cross-checking**: Verify the news using multiple sources."
          "‚ö†Ô∏è **Suspicious signs**: Excessive exclamation marks or ALL CAPS may indicate fake news."
          "üìä **Confidence score**: Results above 80% are more reliable."
        ]

        for tip in tips:
            st.markdown(tip)

        st.markdown("---")
        st.header("üìà Statics")

        # Fake Statics (a sample for Fake Statics)
        st.metric("Today Checked", "1,234")
        st.metric("This Fake detection ", "156")
        st.metric("Model Accuracy", f"{model_info['accuracy']:.1%}")

if __name__ == "__main__":
    main()